plugins {
    id 'org.springframework.boot' version '2.2.2.RELEASE'
    id 'io.spring.dependency-management' version '1.0.8.RELEASE'
    id 'org.asciidoctor.convert' version '1.5.8'
    id 'java'
}

group = 'com.facevisitor.api'
version = '1.0.0-SNAPSHOT'
sourceCompatibility = '1.8'

def queryDslVersion = '4.2.1'


configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
    maven { url 'http://oss.jfrog.org/artifactory/oss-snapshot-local/' }
}

ext {
    set('snippetsDir', file("build/generated-snippets"))
    set('springCloudVersion', "Hoxton.SR1")
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-data-rest'
    implementation 'org.springframework.boot:spring-boot-starter-hateoas'
    implementation 'org.springframework.boot:spring-boot-starter-jdbc'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-hateoas'

    implementation('org.springframework.security.oauth:spring-security-oauth2')
    implementation('org.springframework.security.oauth.boot:spring-security-oauth2-autoconfigure:2.1.0.RELEASE')
    implementation('org.springframework.security:spring-security-jwt:1.0.9.RELEASE')
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-web-services'
    implementation group: 'org.modelmapper', name: 'modelmapper', version: '2.3.5'
    implementation('io.jsonwebtoken:jjwt:0.9.0') // jwt generator
    implementation('com.google.code.gson:gson:2.8.5')
    compileOnly 'org.projectlombok:lombok'
    compile('com.h2database:h2')
    runtimeOnly 'mysql:mysql-connector-java'
    compile group: 'org.springframework.plugin', name: 'spring-plugin-core', version: '2.0.0.RELEASE'
    compile group: 'com.googlecode.json-simple', name: 'json-simple', version: '1.1'
    implementation('com.amazonaws:aws-java-sdk-s3:1.11.247')

    // QueryDSL
    implementation("com.querydsl:querydsl-core:${queryDslVersion}")
    implementation("com.querydsl:querydsl-jpa:${queryDslVersion}")
    annotationProcessor ( /* QueryDSL 주석 프로세서 사용 and (빌드, 실행, 배포 → 컴파일러 → 어노테이션 프로세서)에서 IntelliJ 설정 */
            "com.querydsl:querydsl-apt:${queryDslVersion}:jpa",
            "javax.persistence:javax.persistence-api:2.2",
            "javax.annotation:javax.annotation-api:1.3.2",
    )
    implementation('org.apache.tika:tika-core:1.13') // content type 으로 file extension 가져오기

    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
    testImplementation 'org.springframework.security:spring-security-test'
    implementation 'junit:junit:4.12'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

test {
    outputs.dir snippetsDir
    useJUnitPlatform()
}

asciidoctor {
    inputs.dir snippetsDir
    dependsOn test
}
